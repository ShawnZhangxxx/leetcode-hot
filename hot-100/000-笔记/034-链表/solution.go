/*
__author__ = 'robin-luo'
__date__ = '2023/03/07 14:02'
*/

package main




func main() {

	//1.无环链表相交的第一个节点


	//2.每个k节点局部反转? k= 3  leetcode25 hard
	//a->b->c->d->e->f->g
	//c->b->a->f->e->d->e->g
	//不够k,不用变

	//解答:
	//1.用数组,交换位置
	//2.第一组比较特殊,3为头节点,要存着
	//c->b->a->d
	//d悬空,def反转,d在指向g


	//3.复制带随机指针的链表
	//1->3-->4-->null
	//	 | random
	//	 1

	//解答:全部生成新节点,老的结构不能破坏
	//方法1.map[老节点]:新节点
	//2.1-1`-2-2`-3-3` 就是吧复制的节点放到原来节点后面
	//  1--random->3
	//  1`--random->3.next


	//4.判断是否是回文链表 3-5-3

	//解答1:放到栈里面
	//解答2:快慢指针找中点,逆序后面链表,再比较,缺点:多线程并发情况下不行因为你改变了链表结构


	//5.链表找环 快慢指针



	//6.链表 归并排序 o(nlogn) 空间复杂度1的排序 特别麻烦 leetcode148
	// 只能用循环的归并方式,修改步长才能达到o(1)的空间复杂度
}


