/*
__author__ = 'robin-luo'
__date__ = '2023/03/07 14:02'
*/

package main




func main() {

	//1.设计一个能setAll,的hash表,put,get 都是o(1)
	//解答:加盖时间戳技术,
	//hash表里放{key:[val,版本号]},setAll时候设置个全局版本号,实际并不修改hash表里面的值

	//2.lru数据结构,leetcode146
	//hash表 和双向链表,hash表里存节点索引 ,双向链表初始化两个头尾的空节点会非常方便

	//3.插入,删除,获取随机元素o(1)时间的结构
	//hash表+数组;hash表中存元素在数组中的索引,删除一个数,把数组最后一个元素放到那个空的洞里,arr.remove(arr.length-1),就可以实现随机数,不含有重复的数

	//4.插入,删除和获取随机元素o(1)时间 且允许有重复元素的数据结构跟上面比加强版,概率还要跟重复个数提升
	//把重复元素放到hash的数组里[key:[1,5,8]],其他一样

	//5.快速获得数据流的中位数结构
	//小的一半放入大根堆; 大的一半放入小根堆 ,中位数

	//6.栈结构,pop的时候频率最高的元素,leetcode 895 hard
	//词频表
	//最大次数
	//栈状 链表层数
	//map{a:3,b:2,c:1}
	//maxLevel 3
	//3 a
	//2 a-b
	//1 a-b-c

	//7.全是o(1)的结构,设置一个存储字符串计数的数据结构,并发挥计数最小和最大的字符串 o(1)时间复杂度  leetcode 432 hard
	//incr desc getMaxKey
	//map{str:桶的地址}
	//o词频的桶  <->  1词频的桶   <->  int最大的桶   桶为一个对象{ bucket:hashset,prev,next 下一个桶的指针,count:引用次数 }
	    			 //"a"


}


