/*
__author__ = 'robin-luo'
__date__ = '2023/03/07 14:02'
*/

package main


func main() {

	//1.二叉数层序遍历 leetcode 102
	//不分层宽度优先遍历 队列:加入头,弹出,加左,加右 -->弹出...
	//按层收集节点 :用一个list存[[a],[b,c],,],
	//创建个nextQueue,curQueue,吧left,和right放到nextQueue里


	//2.锯齿形遍历二叉树 层序遍历 先是从左往右,再是从右往左 leetcode 103 ,
	//这个用l和r的数组比较好,比那个多nextQueue的方法好 但是空间复杂度高为n

	//3.二叉树最大特殊宽度,最左的不空到最右的不空 leetcode 602
	//   3
	//1     2
  //null 1 1  null  长度为2


	//4.二叉树最大深度, 最小深度(头结点到页节点的最小高度)
	//func maxDepth(root){
	//	return max(maxDepth(root.left),maxDepth(root.right))+1
	//}

	//func minDepth(root){
	//	if(root == null ){
	//		return 0
	//	}
	//	if(root.left == null && root.right == null ){
	//		return 1
	//	}
	//	int ldeep = Interge.Max_VALUE
	//	int rdeep = Interge.MAX_VALUE
	//	if(root.left != null) {   //这个不能错失为空
	//		ldeep = minDepth(root.left)
	//	}
	//	if(root.right != null){
	//		rdeep = minDepth(root.right)
	//	}
	//	return min(ldeep,rdeep) + 1
	//}


    //5.二叉树先序/后续 序列化,反序列化 leetcode 297

    中序序列化不了的
        2         1
    1                 2
    这俩序列化结果是一样的 # 1 # 2 #


    //6.按层对二叉树进行序列化与反序列化 也是 leetcode 297


    //7先序遍历和中序遍历,还原二叉树,没重复值 leetcode 105 medium
    //先序   root 左 右
    //中序   左 root 右
    func buildTree2(preorder,inorder []int) *TreeNode{
    	if len(preorder) == 0 {
    		return 	nil
    	}
    	var index  = 0
    	for i := 0; i < len(inorder); i++ {
    		if preorder[0] == inorder[i] {
    			index = i
    			break
    		}
    	}
    	root := &TreeNode{
    		Val: preorder[0],
    	}					//这个因为 先序和中序的长度一样长,所以也能决定先序的长度
    	root.Left = buildTree2(preorder[1:index+1],inorder[:index])
    	root.Right = buildTree2(preorder[index+1:],inorder[index+1:])
    	return root
    }

    //8.验证完全二叉树  leetcode 958 medium
    宽度优先遍历,
    1)每个点有右无左false
    2)孩子不全的节点,接下来必须全是叶节点(没孩子)

    //9.求完全二叉树节点数 时间复杂度低于o(n) ,leetcode 222题
    //1)统计出总高度,右树的左边界是否扎到最后一行,二叉数二分法思想,

    */ class Solution {
    public int countNodes(TreeNode root) {
     if (root == null) {
          return 0;
      }
    TreeNode left = root.left;
    TreeNode right = root.right;
    int leftDeepth = 0;
    int rightDeepth = 0;
    while (left != null) {
     left = left.left; leftDeepth++;
    }
    while (right != null) {
        right = right.right; rightDeepth++;
     }
     if (leftDeepth == rightDeepth) {
        return (2 << leftDeepth) - 1;
     }
     return countNodes(root.left) + countNodes(root.right) + 1; }
   }



func countNodes(root *TreeNode) int {
    if root == nil {
        return 0
    }
    level := 0
    for node := root; node.Left != nil; node = node.Left {
        level++
    }
    return sort.Search(1<<(level+1), func(k int) bool {
        if k <= 1<<level {
            return false
        }
        bits := 1 << (level - 1)
        node := root
        for node != nil && bits > 0 {
            if bits&k == 0 {
                node = node.Left
            } else {
                node = node.Right
            }
            bits >>= 1
        }
        return node == nil
    }) - 1
}
